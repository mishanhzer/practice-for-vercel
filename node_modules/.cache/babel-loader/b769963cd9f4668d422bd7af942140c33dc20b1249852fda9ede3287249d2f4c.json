{"ast":null,"code":"var _jsxFileName = \"/Users/michaelkozyutenko/Desktop/marvel_practice/src/components/randomChar/RandomChar.js\";\n// Жизненный цикл компонентов (lifecycle hooks) \n// 1. Компонент появился на странице\n// 2. Компонент обновился (новые пропсы, изменение стейта) - при каждом изменении компонент обновляется и перерисовывается\n// 3. Компонент удаляется со страницы\n\n// На каждом цикле можно вызывать определенные функции:\n// 1. componentDidMount() - компонент появился на странице\n// 2. componentDidUpdate() - компонент обновился\n// 3. componentWillMount() - компонент был удален\n\n// Подробное описание жизненного цикла\n// Первая стадия Монтирование (создание компонента)\n// Последовательность: constructor-render-react update DOM and refs-componentDidMount\n// Вторая стадия Обновление (обновление пропсов, стейта)\n// Последовательность: render-render-react update DOM and refs-componentDidUpdate\n// Третья стадия Размонтирование (удаление компонента)\n// Последовательность: componentWillUnmount\n\nimport { Component } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../error/ErrorMessage';\nimport MarvelService from '../services/MarvelService';\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\n// если делать сетевой запрос в конструкторе - это приведет к багу, вызов два раза запроса (реакт будет понимать, что вызвать запрос, когда структуры еще нет это ошибка и он делает еще раз запрос)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass RandomChar extends Component {\n  constructor(props) {\n    super(props);\n    // this.updateChar();\n    // setInterval(this.updateChar, 3000) // Автоматически обновляем компонент каждые 3 секунды с показом нового персонажа (т.к интервал повешен на этот компонент, то каждый раз когда он пересоздаедтся, старый компонент тоже сохраняется в памяти на него есть ссылка на нем работает интервал)\n    this.state = {\n      char: {},\n      loading: true,\n      error: false\n    };\n    this.marvelService = new MarvelService();\n    this.onLoaded = char => {\n      console.log('update'); // Для проверки в логе, как срабатывает метод setInterval\n      this.setState({\n        char,\n        loading: false\n      });\n    };\n    this.onError = () => {\n      this.setState({\n        loading: false,\n        error: true\n      });\n    };\n    this.updateChar = () => {\n      const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n      this.marvelService.getCharacter(id).then(this.onLoaded).catch(this.onError);\n    };\n    console.log('constructor');\n  }\n  // Любые обновления, любые запросы к API, к серверам, мы должны делать в componentDidMount(), но никак не в конструкторе!!!\n  // componentDidMount() - это лучшее место, чтобы вызывать сетевые сетевые функции \n  componentDidMount() {\n    this.updateChar();\n    this.timerId = setInterval(this.updateChar, 3000);\n    console.log('mount');\n  }\n  componentWillUnmount() {\n    this.clearInterval(this.timerId);\n    console.log('unmount');\n  }\n  render() {\n    console.log('render');\n    const {\n      char,\n      loading,\n      error\n    } = this.state;\n    const errorMessage = error ? /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 38\n    }, this) : null;\n    const spinner = loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 35\n    }, this) : null;\n    const content = !(loading || error) ? /*#__PURE__*/_jsxDEV(View, {\n      char: char\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 47\n    }, this) : null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"randomchar\",\n      children: [errorMessage, spinner, content, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"randomchar__static\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"randomchar__title\",\n          children: [\"Random character for today!\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 52\n          }, this), \"Do you want to get to know him better?\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"randomchar__title\",\n          children: \"Or choose another one\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button button__main\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inner\",\n            children: \"try it\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: mjolnir,\n          alt: \"mjolnir\",\n          className: \"randomchar__decoration\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this);\n  }\n}\nconst View = ({\n  char\n}) => {\n  const {\n    name,\n    description,\n    thumbnail,\n    homepage,\n    wiki\n  } = char;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"randomchar__block\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: thumbnail,\n      alt: \"Random character\",\n      className: \"randomchar__img\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"randomchar__info\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"randomchar__name\",\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"randomchar__descr\",\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"randomchar__btns\",\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          href: homepage,\n          className: \"button button__main\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inner\",\n            children: \"homepage\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: wiki,\n          className: \"button button__secondary\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inner\",\n            children: \"Wiki\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_c = View;\nexport default RandomChar;\nvar _c;\n$RefreshReg$(_c, \"View\");","map":{"version":3,"names":["Component","Spinner","ErrorMessage","MarvelService","mjolnir","jsxDEV","_jsxDEV","RandomChar","constructor","props","state","char","loading","error","marvelService","onLoaded","console","log","setState","onError","updateChar","id","Math","floor","random","getCharacter","then","catch","componentDidMount","timerId","setInterval","componentWillUnmount","clearInterval","render","errorMessage","fileName","_jsxFileName","lineNumber","columnNumber","spinner","content","View","className","children","src","alt","name","description","thumbnail","homepage","wiki","href","_c","$RefreshReg$"],"sources":["/Users/michaelkozyutenko/Desktop/marvel_practice/src/components/randomChar/RandomChar.js"],"sourcesContent":["// Жизненный цикл компонентов (lifecycle hooks) \n// 1. Компонент появился на странице\n// 2. Компонент обновился (новые пропсы, изменение стейта) - при каждом изменении компонент обновляется и перерисовывается\n// 3. Компонент удаляется со страницы\n\n// На каждом цикле можно вызывать определенные функции:\n// 1. componentDidMount() - компонент появился на странице\n// 2. componentDidUpdate() - компонент обновился\n// 3. componentWillMount() - компонент был удален\n\n\n// Подробное описание жизненного цикла\n// Первая стадия Монтирование (создание компонента)\n    // Последовательность: constructor-render-react update DOM and refs-componentDidMount\n// Вторая стадия Обновление (обновление пропсов, стейта)\n    // Последовательность: render-render-react update DOM and refs-componentDidUpdate\n// Третья стадия Размонтирование (удаление компонента)\n    // Последовательность: componentWillUnmount\n\n\nimport { Component } from 'react';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../error/ErrorMessage';\nimport MarvelService from '../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\n// если делать сетевой запрос в конструкторе - это приведет к багу, вызов два раза запроса (реакт будет понимать, что вызвать запрос, когда структуры еще нет это ошибка и он делает еще раз запрос)\nclass RandomChar extends Component {\n    constructor(props) {\n        super(props);\n        // this.updateChar();\n        // setInterval(this.updateChar, 3000) // Автоматически обновляем компонент каждые 3 секунды с показом нового персонажа (т.к интервал повешен на этот компонент, то каждый раз когда он пересоздаедтся, старый компонент тоже сохраняется в памяти на него есть ссылка на нем работает интервал)\n        console.log('constructor');\n    }\n\n    state = {\n        char: {},\n        loading: true,\n        error: false,\n    }\n\n    marvelService = new MarvelService();\n    // Любые обновления, любые запросы к API, к серверам, мы должны делать в componentDidMount(), но никак не в конструкторе!!!\n    // componentDidMount() - это лучшее место, чтобы вызывать сетевые сетевые функции \n    componentDidMount() {\n        this.updateChar();\n        this.timerId = setInterval(this.updateChar, 3000);\n        console.log('mount');\n    }\n\n    componentWillUnmount() {\n        this.clearInterval(this.timerId);\n        console.log('unmount');\n    }\n\n\n    onLoaded = (char) => {\n        console.log('update'); // Для проверки в логе, как срабатывает метод setInterval\n        this.setState({\n            char,\n            loading: false,\n        });\n    }\n\n    onError = () => {\n        this.setState({\n            loading: false,\n            error: true,\n        })\n    }\n\n    updateChar = () => {\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000); \n        this.marvelService\n            .getCharacter(id)\n            .then(this.onLoaded)\n            .catch(this.onError)\n    }\n\n\n    render() {\n        console.log('render');\n        const {char, loading, error} = this.state;\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error) ? <View char={char}/> : null; \n        \n        return (\n            <div className=\"randomchar\">\n                {errorMessage} \n                {spinner} \n                {content}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br/>\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button className=\"button button__main\">\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst View = ({char}) => { \n    const {name, description, thumbnail, homepage, wiki} = char;\n\n    return (\n    <div className=\"randomchar__block\">\n        <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\"/>\n        <div className=\"randomchar__info\">\n            <p className=\"randomchar__name\">{name}</p>\n            <p className=\"randomchar__descr\">\n                {description}\n            </p>\n            <div className=\"randomchar__btns\">\n                <a href={homepage} className=\"button button__main\">\n                    <div className=\"inner\">homepage</div>\n                </a>\n                <a href={wiki} className=\"button button__secondary\">\n                    <div className=\"inner\">Wiki</div>\n                </a>\n            </div>\n        </div>\n    </div>\n    )\n}\n\nexport default RandomChar;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}