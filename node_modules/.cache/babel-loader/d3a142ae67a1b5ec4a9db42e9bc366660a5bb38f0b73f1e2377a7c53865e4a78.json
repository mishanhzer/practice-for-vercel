{"ast":null,"code":"var _jsxFileName = \"/Users/michaelkozyutenko/Desktop/marvel_starter/src/components/errorBoundary/ErrorBoundary.js\";\nimport { Component } from \"react\";\nimport ErrorMessage from \"../error/ErrorMessage\";\n\n// Предохранители это только классовые компоненты, которые оборачивают другие компоненты и если в их дочерних компонентах будет ошибки, то предохранители будут ее ловить и приложение падать не будет, а ломаться будет только этот компонент\n// Предохранители ловят ошибки при запуске render(), методах ЖЦ и конструкторах дочерних компонентов\n// Предохранители не ловят ошибки, которые произошли внутри обработичках событий, асинхронный код (поэтому у нас есть catch()), и в самом предохранителе\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass ErrorBoundary extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      error: false\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error: true\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.log(error);\n    console.log(errorInfo);\n    this.setState({\n      error: true\n    });\n  }\n  render() {\n    if (this.state.error) {\n      return /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 20\n      }, this);\n    }\n    return this.props.children;\n  }\n}\nexport default ErrorBoundary;","map":{"version":3,"names":["Component","ErrorMessage","jsxDEV","_jsxDEV","ErrorBoundary","constructor","args","state","error","getDerivedStateFromError","componentDidCatch","errorInfo","console","log","setState","render","fileName","_jsxFileName","lineNumber","columnNumber","props","children"],"sources":["/Users/michaelkozyutenko/Desktop/marvel_starter/src/components/errorBoundary/ErrorBoundary.js"],"sourcesContent":["import { Component } from \"react\";\n\nimport ErrorMessage from \"../error/ErrorMessage\";\n\n// Предохранители это только классовые компоненты, которые оборачивают другие компоненты и если в их дочерних компонентах будет ошибки, то предохранители будут ее ловить и приложение падать не будет, а ломаться будет только этот компонент\n// Предохранители ловят ошибки при запуске render(), методах ЖЦ и конструкторах дочерних компонентов\n// Предохранители не ловят ошибки, которые произошли внутри обработичках событий, асинхронный код (поэтому у нас есть catch()), и в самом предохранителе\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    static getDerivedStateFromError(error) {\n        return {error: true};\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error);\n        console.log(errorInfo);\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage />\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AAEjC,OAAOC,YAAY,MAAM,uBAAuB;;AAEhD;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,aAAa,SAASJ,SAAS,CAAC;EAAAK,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KAClCC,KAAK,GAAG;MACJC,KAAK,EAAE;IACX,CAAC;EAAA;EAED,OAAOC,wBAAwBA,CAACD,KAAK,EAAE;IACnC,OAAO;MAACA,KAAK,EAAE;IAAI,CAAC;EACxB;EAEAE,iBAAiBA,CAACF,KAAK,EAAEG,SAAS,EAAE;IAChCC,OAAO,CAACC,GAAG,CAACL,KAAK,CAAC;IAClBI,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC;IACtB,IAAI,CAACG,QAAQ,CAAC;MACVN,KAAK,EAAE;IACX,CAAC,CAAC;EACN;EAEAO,MAAMA,CAAA,EAAG;IACL,IAAI,IAAI,CAACR,KAAK,CAACC,KAAK,EAAE;MAClB,oBAAOL,OAAA,CAACF,YAAY;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAC3B;IACA,OAAO,IAAI,CAACC,KAAK,CAACC,QAAQ;EAC9B;AACJ;AAEA,eAAejB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}