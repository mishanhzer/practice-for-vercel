{"ast":null,"code":"var _jsxFileName = \"/Users/michaelkozyutenko/Desktop/marvel_starter/src/components/errorBoundary/ErrorBoundary.js\";\nimport { Component } from \"react\";\nimport ErrorMessage from \"../error/ErrorMessage\"; // импортируем компонент ошибки, чтобы в случае падения компонента, вставить компонент ошибки\n\n// Предохранители это только классовые компоненты, которые оборачивают другие компоненты и если в их дочерних компонентах будет ошибки, то предохранители будут ее ловить и приложение падать не будет, а ломаться будет только этот компонент\n// Предохранители ловят ошибки при запуске метода render(), методах ЖЦ и в конструкторах дочерних компонентов\n// Предохранители не ловят ошибки, которые произошли внутри обработичках событий, асинхронный код (поэтому у нас есть catch()), и в самом предохранителе (он ловит ошибки только дочерних компонентов, но не внутри себя)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass ErrorBoundary extends Component {\n  constructor(...args) {\n    super(...args);\n    // Создаем предохранитель\n    this.state = {\n      // создаем стейт\n      error: false\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error: true\n    };\n  }\n\n  // Вот здесь мы можем использовать componentDidCatch()\n  componentDidCatch(error, errorInfo) {\n    // передаем два аргумента\n    console.log(error);\n    console.log(errorInfo);\n    this.setState({\n      // меняем стейт \n      error: true\n    });\n  }\n  render() {\n    if (this.state.error) {\n      // Условие (если стейт error === true), то вернем компонент ошибки (запасной компонет, если у нас основной компонент сломался из за ошибки)\n      return /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 20\n      }, this);\n    }\n    return this.props.children; // если ошибки нет, то вернем компонент, который был передан внутрь ErrorBoundary\n  }\n}\nexport default ErrorBoundary;","map":{"version":3,"names":["Component","ErrorMessage","jsxDEV","_jsxDEV","ErrorBoundary","constructor","args","state","error","getDerivedStateFromError","componentDidCatch","errorInfo","console","log","setState","render","fileName","_jsxFileName","lineNumber","columnNumber","props","children"],"sources":["/Users/michaelkozyutenko/Desktop/marvel_starter/src/components/errorBoundary/ErrorBoundary.js"],"sourcesContent":["import { Component } from \"react\";\n\nimport ErrorMessage from \"../error/ErrorMessage\"; // импортируем компонент ошибки, чтобы в случае падения компонента, вставить компонент ошибки\n\n// Предохранители это только классовые компоненты, которые оборачивают другие компоненты и если в их дочерних компонентах будет ошибки, то предохранители будут ее ловить и приложение падать не будет, а ломаться будет только этот компонент\n// Предохранители ловят ошибки при запуске метода render(), методах ЖЦ и в конструкторах дочерних компонентов\n// Предохранители не ловят ошибки, которые произошли внутри обработичках событий, асинхронный код (поэтому у нас есть catch()), и в самом предохранителе (он ловит ошибки только дочерних компонентов, но не внутри себя)\n\nclass ErrorBoundary extends Component { // Создаем предохранитель\n    state = { // создаем стейт\n        error: false\n    }\n\n    static getDerivedStateFromError(error) {\n        return {error: true};\n    }\n\n    // Вот здесь мы можем использовать componentDidCatch()\n    componentDidCatch(error, errorInfo) { // передаем два аргумента\n        console.log(error);\n        console.log(errorInfo);\n        this.setState({ // меняем стейт \n            error: true\n        })\n    }\n\n    render() { \n        if (this.state.error) { // Условие (если стейт error === true), то вернем компонент ошибки (запасной компонет, если у нас основной компонент сломался из за ошибки)\n            return <ErrorMessage />\n        }\n        return this.props.children; // если ошибки нет, то вернем компонент, который был передан внутрь ErrorBoundary\n    }\n}\n\nexport default ErrorBoundary;"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AAEjC,OAAOC,YAAY,MAAM,uBAAuB,CAAC,CAAC;;AAElD;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,aAAa,SAASJ,SAAS,CAAC;EAAAK,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAE;IAAA,KACpCC,KAAK,GAAG;MAAE;MACNC,KAAK,EAAE;IACX,CAAC;EAAA;EAED,OAAOC,wBAAwBA,CAACD,KAAK,EAAE;IACnC,OAAO;MAACA,KAAK,EAAE;IAAI,CAAC;EACxB;;EAEA;EACAE,iBAAiBA,CAACF,KAAK,EAAEG,SAAS,EAAE;IAAE;IAClCC,OAAO,CAACC,GAAG,CAACL,KAAK,CAAC;IAClBI,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC;IACtB,IAAI,CAACG,QAAQ,CAAC;MAAE;MACZN,KAAK,EAAE;IACX,CAAC,CAAC;EACN;EAEAO,MAAMA,CAAA,EAAG;IACL,IAAI,IAAI,CAACR,KAAK,CAACC,KAAK,EAAE;MAAE;MACpB,oBAAOL,OAAA,CAACF,YAAY;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAC3B;IACA,OAAO,IAAI,CAACC,KAAK,CAACC,QAAQ,CAAC,CAAC;EAChC;AACJ;AAEA,eAAejB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}