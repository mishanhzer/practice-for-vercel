{"ast":null,"code":"var _jsxFileName = \"/Users/michaelkozyutenko/Desktop/marvel_starter/src/components/charList/CharList.js\";\nimport { Component } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../error/ErrorMessage';\nimport './charList.scss';\nimport MarvelService from '../services/MarvelService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass CharList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      charList: [],\n      loading: true,\n      // этот loading запускается при первичной загрузке\n      error: false,\n      newItemLoading: false,\n      // создаем новое свойство стейта (относится к загрузке новых элементов)\n      offset: 205,\n      // создаем новое свойство (отступ - его мы будем подставлять в метод запроса, который в свою очередь изменит полученные данные - const res = await this.getResource(`${this._apiBase}?limit=9&offset=${offset}&${this._apiKey}`);)\n      charEnded: false\n    };\n    this.marvelService = new MarvelService();\n    // Создаем метод на получение новых данных (при клике на кнопку)\n    this.onRequest = offset => {\n      // аргумент offset\n      this.onCharListLoading(); // вызываем этот метод перед нашим запросом (персонажи грузятся)\n      this.marvelService.getAllCharacters(offset) // передаем offset в метод\n      .then(this.onCharListLoaded).catch(this.onError);\n    };\n    // Создаем метод - загрузка новых персонажей\n    this.onCharListLoading = () => {\n      this.setState({\n        // меняем стейт \n        newItemLoading: true\n      });\n    };\n    // Когда новые данные у нас пришли, нам нужно добавить 9 персонажей к списку старых персонажей (а не перерисовать их)   \n    this.onCharListLoaded = newCharList => {\n      // newCharList в нем будут новые данные (персонажи), которые записались после клика\n      let ended = false;\n      if (newCharList.length < 9) {\n        ended = true;\n      }\n      this.setState(({\n        charList,\n        offset\n      }) => ({\n        // меняем стейт на колбек (мы будем отталкиваться от предыдущего стейта)\n        charList: [...charList, ...newCharList],\n        // соединяем старых персонажей с новыми (charList в начале это [], newCharList это новые данные, после клика charList будет массив с 9 персонажами, а newCharList следующие новые 9 персонажей и так далее)\n        loading: false,\n        newItemLoading: false,\n        // когда персонажи загрузились меняем свойстсво на false\n        offset: offset + 9,\n        // увеличиваем отступ на 9 (9 персонажей, который к нам придут)\n        charEnded: ended\n      }));\n    };\n    this.onError = () => {\n      this.setState({\n        error: true,\n        loading: false\n      });\n    };\n  }\n  componentDidMount() {\n    this.marvelService.getAllCharacters() // тут аргумента нет, поэтому подставится дефолтное значение offset = 205\n    .then(this.onCharListLoaded).catch(this.onError);\n\n    // можно оптимизировать (это будет аналогично конструкции выше, а вызов this.onCharListLoading() на моменте создания компонента ни на что не повлияет)\n    // this.onRequest();\n  }\n\n  renderItems(arr) {\n    const items = arr.map(item => {\n      let imgStyle = {\n        'objectFit': 'cover'\n      };\n      if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {\n          'objectFit': 'unset'\n        };\n      }\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"char__item\",\n        onClick: () => this.props.onCharSelected(item.id),\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: item.thumbnail,\n          alt: item.name,\n          style: imgStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"char__name\",\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"char__grid\",\n      children: items\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this);\n  }\n  render() {\n    const {\n      charList,\n      loading,\n      error,\n      newItemLoading,\n      offset,\n      charEnded\n    } = this.state;\n    const items = this.renderItems(charList);\n    const errorMessage = error ? /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 38\n    }, this) : null;\n    const spinner = loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 35\n    }, this) : null;\n    const content = !(loading || error) ? items : null;\n\n    // Создаем аргумент disabled (Псевдокласс CSS представляет любой отключенный элемент), который будет зависеть от стейта newItemLoading (если идет загрузка персонажей, то кнопка заблокирована)\n    // \n    // Навешиваем обработчик события и передаем в него стейт offset\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"char__list\",\n      children: [errorMessage, spinner, content, /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button button__main button__long\",\n        disabled: newItemLoading,\n        style: {\n          'display': charEnded ? 'none' : 'block'\n        },\n        onClick: () => this.onRequest(offset),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inner\",\n          children: \"load more\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default CharList;","map":{"version":3,"names":["Component","Spinner","ErrorMessage","MarvelService","jsxDEV","_jsxDEV","CharList","constructor","args","state","charList","loading","error","newItemLoading","offset","charEnded","marvelService","onRequest","onCharListLoading","getAllCharacters","then","onCharListLoaded","catch","onError","setState","newCharList","ended","length","componentDidMount","renderItems","arr","items","map","item","imgStyle","thumbnail","className","onClick","props","onCharSelected","id","children","src","alt","name","style","fileName","_jsxFileName","lineNumber","columnNumber","render","errorMessage","spinner","content","disabled"],"sources":["/Users/michaelkozyutenko/Desktop/marvel_starter/src/components/charList/CharList.js"],"sourcesContent":["import { Component } from 'react';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../error/ErrorMessage'\n\nimport './charList.scss';\nimport MarvelService from '../services/MarvelService';\n\nclass CharList extends Component {\n    state = {\n        charList: [], \n        loading: true, // этот loading запускается при первичной загрузке\n        error: false,\n        newItemLoading: false, // создаем новое свойство стейта (относится к загрузке новых элементов)\n        offset: 205, // создаем новое свойство (отступ - его мы будем подставлять в метод запроса, который в свою очередь изменит полученные данные - const res = await this.getResource(`${this._apiBase}?limit=9&offset=${offset}&${this._apiKey}`);)\n        charEnded: false\n    }\n    \n    marvelService = new MarvelService();\n\n    componentDidMount() { \n        this.marvelService.getAllCharacters() // тут аргумента нет, поэтому подставится дефолтное значение offset = 205\n            .then(this.onCharListLoaded)\n            .catch(this.onError)\n\n        // можно оптимизировать (это будет аналогично конструкции выше, а вызов this.onCharListLoading() на моменте создания компонента ни на что не повлияет)\n        // this.onRequest();\n    }\n\n    // Создаем метод на получение новых данных (при клике на кнопку)\n    onRequest = (offset) => { // аргумент offset\n        this.onCharListLoading(); // вызываем этот метод перед нашим запросом (персонажи грузятся)\n        this.marvelService.getAllCharacters(offset) // передаем offset в метод\n            .then(this.onCharListLoaded)\n            .catch(this.onError)\n    }\n\n    // Создаем метод - загрузка новых персонажей\n    onCharListLoading = () => {\n        this.setState({ // меняем стейт \n            newItemLoading: true\n        })\n    }\n\n    // Когда новые данные у нас пришли, нам нужно добавить 9 персонажей к списку старых персонажей (а не перерисовать их)   \n    onCharListLoaded = (newCharList) => { // newCharList в нем будут новые данные (персонажи), которые записались после клика\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        this.setState(({charList, offset}) => ({ // меняем стейт на колбек (мы будем отталкиваться от предыдущего стейта)\n            charList: [...charList, ...newCharList], // соединяем старых персонажей с новыми (charList в начале это [], newCharList это новые данные, после клика charList будет массив с 9 персонажами, а newCharList следующие новые 9 персонажей и так далее)\n            loading: false,\n            newItemLoading: false, // когда персонажи загрузились меняем свойстсво на false\n            offset: offset + 9, // увеличиваем отступ на 9 (9 персонажей, который к нам придут)\n            charEnded: ended\n        }))\n    }\n\n    onError = () => {\n        this.setState({\n            error: true,\n            loading: false\n        })\n    }\n\n\n    renderItems(arr) {\n        const items =  arr.map((item) => {\n\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'}; \n            }\n            \n            return (\n                <li \n                    className=\"char__item\"\n                    key={item.id}\n                    onClick={() => this.props.onCharSelected(item.id)}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        \n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    render() {\n        const {charList, loading, error, newItemLoading, offset, charEnded} = this.state;\n        \n        const items = this.renderItems(charList); \n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error) ? items : null;\n\n\n        // Создаем аргумент disabled (Псевдокласс CSS представляет любой отключенный элемент), который будет зависеть от стейта newItemLoading (если идет загрузка персонажей, то кнопка заблокирована)\n        // \n        // Навешиваем обработчик события и передаем в него стейт offset\n        return (\n            <div className=\"char__list\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <button \n                    className=\"button button__main button__long\"\n                    disabled={newItemLoading}\n                    style={{'display': charEnded ? 'none' : 'block'}}\n                    onClick={() => this.onRequest(offset)}>\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default CharList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}